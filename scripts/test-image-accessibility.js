import fs from 'fs'
import path from 'path'

async function testImageAccessibility() {
  try {
    console.log('üñºÔ∏è Test d\'accessibilit√© des images')
    console.log('=' .repeat(50))
    
    const imagePath = 'public/images/robes/cmgvjs2ja0046zt8omfpswatb.jpg'
    const fallbackPath = 'public/images/robes/cmgv89opa0028ztywhjo2g2pl.png'
    
    console.log(`\nüìÅ V√©rification des fichiers:`)
    
    // V√©rifier si l'image JPG existe
    if (fs.existsSync(imagePath)) {
      const stats = fs.statSync(imagePath)
      console.log(`‚úÖ Image JPG trouv√©e: ${imagePath}`)
      console.log(`   Taille: ${(stats.size / 1024).toFixed(2)} KB`)
      console.log(`   Modifi√©e: ${stats.mtime}`)
    } else {
      console.log(`‚ùå Image JPG non trouv√©e: ${imagePath}`)
    }
    
    // V√©rifier si l'image PNG de fallback existe
    if (fs.existsSync(fallbackPath)) {
      const stats = fs.statSync(fallbackPath)
      console.log(`‚úÖ Image PNG de fallback trouv√©e: ${fallbackPath}`)
      console.log(`   Taille: ${(stats.size / 1024).toFixed(2)} KB`)
      console.log(`   Modifi√©e: ${stats.mtime}`)
    } else {
      console.log(`‚ùå Image PNG de fallback non trouv√©e: ${fallbackPath}`)
    }
    
    // Lister toutes les images dans le dossier robes
    console.log(`\nüìÇ Toutes les images dans public/images/robes:`)
    const robesDir = 'public/images/robes'
    
    if (fs.existsSync(robesDir)) {
      const files = fs.readdirSync(robesDir)
      const imageFiles = files.filter(file => 
        file.toLowerCase().endsWith('.jpg') || 
        file.toLowerCase().endsWith('.jpeg') || 
        file.toLowerCase().endsWith('.png')
      )
      
      console.log(`   ${imageFiles.length} images trouv√©es:`)
      imageFiles.forEach((file, index) => {
        const filePath = path.join(robesDir, file)
        const stats = fs.statSync(filePath)
        const extension = file.split('.').pop().toLowerCase()
        console.log(`   ${index + 1}. ${file} (${extension}, ${(stats.size / 1024).toFixed(2)} KB)`)
      })
      
      // V√©rifier sp√©cifiquement les images de la robe soir√©e noire
      console.log(`\nüîç Images de la robe soir√©e noire:`)
      const robeSoireeImages = imageFiles.filter(file => 
        file.includes('cmgvjs2ja0046zt8omfpswatb')
      )
      
      if (robeSoireeImages.length > 0) {
        robeSoireeImages.forEach(file => {
          const filePath = path.join(robesDir, file)
          const stats = fs.statSync(filePath)
          const extension = file.split('.').pop().toLowerCase()
          console.log(`   ‚úÖ ${file} (${extension}, ${(stats.size / 1024).toFixed(2)} KB)`)
        })
      } else {
        console.log(`   ‚ùå Aucune image trouv√©e pour la robe soir√©e noire`)
      }
    } else {
      console.log(`‚ùå Dossier robes non trouv√©: ${robesDir}`)
    }
    
    // Test de l'URL de l'image
    console.log(`\nüåê URLs des images:`)
    console.log(`   Image JPG: /images/robes/cmgvjs2ja0046zt8omfpswatb.jpg`)
    console.log(`   Image PNG fallback: /images/robes/cmgv89opa0028ztywhjo2g2pl.png`)
    
    console.log(`\nüí° Suggestions:`)
    console.log(`   1. V√©rifiez que le serveur Next.js est d√©marr√©`)
    console.log(`   2. Testez l'URL: http://localhost:3000/images/robes/cmgvjs2ja0046zt8omfpswatb.jpg`)
    console.log(`   3. V√©rifiez la console du navigateur pour les erreurs 404`)
    console.log(`   4. Videz le cache du navigateur`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  }
}

// Ex√©cuter le test
testImageAccessibility()
